let cropper;
        const inputImage = document.getElementById('productImages');
        const image = document.getElementById('image');
        const cropButton = document.getElementById('cropButton') ; 
        const cropperContainer = document.getElementById('cropperContainer');
        const croppedImagesContainer = document.getElementById('croppedImages');
        let croppedImagesData = [];

        inputImage.addEventListener('change', (event) => {
            const files = event.target.files; 
            if (files && files.length > 0) {
                const file = files[0];
                const reader = new FileReader(); 
                reader.onload = (e) => {
                    image.src = e.target.result; 
                    cropperContainer.style.display = 'block'; 
                    cropButton.style.display = 'inline-block';
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(image, {
                        aspectRatio: NaN,
                        viewMode: 1,
                        dragMode: 'move',
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        minCropBoxWidth: 50,
                        minCropBoxHeight: 50,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener('click', () => {
            if (!cropper) {
                alert('Please select an image first.');
                return;
            }

            cropper.getCroppedCanvas().toBlob((blob) => {
                croppedImagesData.push(blob);

                const url = URL.createObjectURL(blob);
                const imgElement = document.createElement('img');
                imgElement.src = url;
                imgElement.style.maxWidth = '100px';
                imgElement.style.margin = '10px';
                croppedImagesContainer.appendChild(imgElement) ;

                cropperContainer.style.display = 'none';
                cropButton.style.display = 'none'; 
                inputImage.value = '';
                inputImage.disabled = false; 
            }, 'image/png');
        });

        document.getElementById('form').addEventListener('submit', function(event) {
            event.preventDefault();

            const formData = new FormData(this);
            formData.delete('productImages'); 

      
            
     
      // const sizes = [];

      // const sizeNames = formData.getAll('size[]');
      // const prices = formData.getAll('price[]');
      // const quantities = formData.getAll('quantity[]');
      // const discountedPrices = formData.getAll('discountedPrice[]');
      // const discountPercentages = formData.getAll('discountPercentage[]'); 

      // sizeNames.forEach((size, index) => {
      //   sizes.push({
      //     [size]: {
      //       price: prices[index],
      //       quantity: quantities[index],
      //       discountedPrice: discountedPrices[index],
      //       discountPercentage: discountPercentages[index],
      //     }
      //   });
      // });
        
    
            croppedImagesData.forEach((blob , index) => {
                formData.append(productImages, blob, cropped_${index}.png)  ;
            });  

            fetch(this.action, {
                method: 'POST',
                body: formData,
            }).then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert('Failed to add product: ' + data.error); 
                }
            }).catch(error => {
                console.error( ' Error : ' , error );
                alert( ' Failed to add product ' ) ; 
            });
        });


        //add product size details
        function addRow() {

        const table = document.getElementById('productTable').getElementsByTagName('tbody')[0];
        const rowCount = table.rows.length ;
        const newRow = table.insertRow() ;
    
        newRow.innerHTML = `
            <td><input type="text"  name="size[]" class="border border-gray-300 p-1"></td>
            <td><input type="number" name="quantity[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="price[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="discountedPrice[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="discountedPercentage[]" class="border border-gray-300 p-1" min="0"></td>
            <td><button type="button" class="text-red-500" onclick="deleteRow(this)">Delete</button></td>
        `;
        }

        function deleteRow(button) {
            const row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }
  </script>