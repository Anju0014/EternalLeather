<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src='https://kit.fontawesome.com/fc2e75786e.js' crossorigin='anonymous'></script>
    <link href="https://fonts.googleapis.com/css2?family=Sevillana&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        /* Add your custom styles here */
        #cropperContainer img {
            max-width: 100%;
        }
        #croppedImagesContainer img {
            max-width: 100px;
            margin: 10px;
        }
        .box-brown {
            /* background-image: #e3c7b4; */
            background-image: linear-gradient(to right,#FFE0CA, #964820)
        }
        .box-dash{
            background-image: linear-gradient(#FFE0CA, #bc6438)

        }
        .text-brown {
            color: #250201; /* Brown color */
        }
         .sevillana-title {
            font-family: 'Sevillana', cursive;
            font-size: 2.5em;
            text-align: center;
            margin-top: 10px;
        }
        .box-foot
        {   
            background-color:#964820
        }
    </style>
</head>
<body>
    <%- include('adminHeader') %> 
    <div class="flex justify-normal">
        <div class="flex justify-normal">
            <%- include('adminSideBar') %> 
            <br>
        </div> 



    <form id="form" action="/admin/product/add" method="POST" enctype="multipart/form-data" class="lg:mx-56 lg:my-10 sm:mx-6 sm:my-2 px-4 bg-red-100 rounded-lg">
        <div id="error" class="text-red-900"></div>
    
       
     
        <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-3 gap-4 mb-4 bg-red-100 rounded-lg lg:p-5 w-full">
         
            <div class="mb-4">
                <label class="block font-bold mb-2">Product Name</label>
                <input type="text" id="productname" name="productname" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="productNameError" class="text-red-500 text-sm"></span>
            </div>
    
          
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Price</label>
                <input type="number" id="price" name="price" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="priceError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Stock</label>
                <input type="number" id="qty" name="qty" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="qtyError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Type</label>
                <input type="text" id="variety" name="variety" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="varietyError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Color</label>
                <input type="text" id="color" name="color" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="colorError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Discount</label>
                <input type="number" id="discount" name="discount" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <span id="discountError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4">
                <label class="block font-bold mb-2">Product Category</label>
                <select name="category" id="category" class="w-full px-4 py-2 rounded-lg text-black border focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                    <option value="" selected disabled>Select a category</option>
                    <% productCollection.forEach((category)=> { %>
                        <option value="<%= category._id %>">
                            <%= category.categoryName %>
                        </option>
                    <% }) %>
                </select>
                <span id="categoryError" class="text-red-500 text-sm"></span>
            </div>
    
            <div class="mb-4 col-span-3">
                <label class="block font-bold mb-2">Product Description</label>
                <textarea id="description" name="description" rows="4" class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
            </div>
        </div>
     
    
      
        <div class="mb-4 ">
            <label class="block font-bold mb-2">Product Images</label>
            <input type="file" id="images" name="images" accept="image/*" multiple class="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
    
        <div id="cropperContainer" style="display: none; margin-bottom: 20px;">
            <img id="image" src="" alt="Image for cropping">
        </div>
        <div id="imageContainer" style="margin-bottom:20px">  
            <div id="viewImages" class="flex flex-wrap"></div>
            <span id="viewImagesError" class="text-red-500 text-sm"></span>
        </div>
        <div id="croppedImagesContainer" class="mb-4">
            <h3 class="text-sm font-medium text-gray-700">Cropped Images</h3>
            <div id="croppedImages" class="flex flex-wrap"></div>
          
        </div>
    
        <button type="button" id="cropButton" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
    
        <button type="submit" id="submitButton" class="w-full bg-black text-white mt-4 font-bold py-2 px-4 rounded-lg">
            Add Product
        </button>
    </form>
    

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
     const cloudinaryPreset = "ml_defaulteternal";  // Replace with your Cloudinary preset
const cloudinaryUrl = 'https://api.cloudinary.com/v1_1/dihyb66hn/image/upload'; // Replace with your Cloudinary URL


let cropper;
const inputImage = document.getElementById('images');
const image = document.getElementById('image');
const cropButton = document.getElementById('cropButton');
const cropperContainer = document.getElementById('cropperContainer');
const croppedImagesContainer = document.getElementById('croppedImages');
const viewImages=document.getElementById('viewImages')
const form = document.getElementById('form');



const croppedImageUrls = [];

function validateForm() {
    let isValid = true;

// Clear previous error messages
// document.querySelectorAll('span[id$="-error"]').forEach(span => {
//     span.textContent = '';
// });

document.getElementById('productNameError').textContent = '';
    document.getElementById('priceError').textContent = '';
    document.getElementById('qtyError').textContent = '';
    document.getElementById('varietyError').textContent = '';
    document.getElementById('colorError').textContent = '';
    document.getElementById('discountError').textContent = '';
    document.getElementById('categoryError').textContent = '';
    document.getElementById('viewImagesError').textContent = '';



const productName = form.productname.value.trim();
const price = form.price.value.trim();
const qty = form.qty.value.trim();
const variety = form.variety.value.trim();
const color = form.color.value.trim();
const discount = form.discount.value.trim();
const category = form.category.value;



if (productName.length < 3) {
    document.getElementById('productNameError').textContent = 'Product name must be at least 3 characters.';
    isValid = false;
}


if (!price || isNaN(price) || price <= 0) {
    document.getElementById('priceError').textContent = 'Price must be a positive number.';
    isValid = false;
}


if (!qty || isNaN(qty) || parseInt(qty) < 0) {
    document.getElementById('qtyError').textContent = 'Stock must be a positive integer.';
    isValid = false;
}


if (variety.length < 1) {
    document.getElementById('varietyError').textContent = 'Product variety is required.';
    isValid = false;
}


if (color.length < 1) {
    document.getElementById('colorError').textContent = 'Color is required.';
    isValid = false;
}


if (!discount || isNaN(discount) || discount < 0 || discount > 50) {
    document.getElementById('discountError').textContent = 'Discount must be between 0 and 50.';
    isValid = false;
}


if (!category) {
    document.getElementById('categoryError').textContent = 'Please select a product category.';
    isValid = false;
}



if (viewImages.children.length < 4) {
    document.getElementById('viewImagesError').textContent = 'Please Add 4 images';
    isValid = false;
} else {

    document.getElementById('viewImagesError').textContent = '';
}


if (!isValid) {
    event.preventDefault();
}


        return isValid;
    }
inputImage.addEventListener('change', (event) => {
    try{
    const files = event.target.files;
    if (files && files.length > 0) {
        
        cropperContainer.style.display = 'none';
        cropButton.style.display = 'none';
        croppedImagesContainer.innerHTML = ''; 

        Array.from(files).forEach((file) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                image.src = e.target.result;
                cropperContainer.style.display = 'block';
                cropButton.style.display = 'inline-block';
                
               
                if (cropper) cropper.destroy();
                cropper = new Cropper(image, {
                    aspectRatio: NaN,
                    viewMode: 1,
                    dragMode: 'move',
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                });

              
                cropButton.onclick = async () => {
                    if (!cropper) {
                        alert('Please select an image first.');
                        return;
                    }

                    cropper.getCroppedCanvas().toBlob(async (blob) => {
                        const formData = new FormData();
                        formData.append('file', blob);
                        formData.append('upload_preset', cloudinaryPreset); 

                        try {
                            const response = await fetch(cloudinaryUrl, { method: 'POST', body: formData });
                            const data = await response.json();
                            if (data.secure_url) {
                                const url = data.secure_url;
                                if(croppedImageUrls.length>=4){
                                    
                                    Swal.fire({
                                    icon: "error",
                                    title: "Image Add Error",
                                    text: "You can add only 4 Images ."
                              });

                                }else{
                              
                                croppedImageUrls.push(url);

                                const imgElement = document.createElement('img');
                                imgElement.src = url;
                                imgElement.style.maxWidth = '100px';
                                imgElement.style.margin = '10px';
                                croppedImagesContainer.appendChild(imgElement);
                                viewImages.appendChild(imgElement);

                                
                                const hiddenInput = document.createElement('input');
                                hiddenInput.type = 'hidden';
                                hiddenInput.name = 'croppedImages';
                                hiddenInput.value = url;
                                form.appendChild(hiddenInput);

                               
                                cropperContainer.style.display = 'none';
                                cropButton.style.display = 'none';
                                inputImage.value = ''; 
                                inputImage.disabled = false;
                            }} else {
                                Swal.fire({
                                    icon: "error",
                                    title: "Image Add Error",
                                    text: "Failed to upload image to Cloudinary."
                              });
                              

                            }
                        } catch (error) {
                            console.error('Error uploading image:', error);
                           
                            Swal.fire({
                                    icon: "error",
                                    title: "Image Add Error",
                                    text: "Failed to upload image to Cloudinary."
                              });
                        }
                    }, 'image/png');
                };
            };
            reader.readAsDataURL(file); 
        });
    }
}catch(error){
            Swal.fire({
                icon: "error",
                title: "Image Add Error",
                text: "Add Image Properly."
                });
}
});

document.getElementById('submitButton').addEventListener('click', async (e) => {

    e.preventDefault();

    if (!validateForm()) {
            return; 
        }

    const formData = new FormData(form);
    
  
    const croppedImages = croppedImageUrls;

    const jsonPayload = {
        productname: formData.get('productname'),
        price: formData.get('price'),
        description: formData.get('description'),
        qty: formData.get('qty'),
        variety:formData.get('variety'),
        discount:formData.get('discount'),
        color:formData.get('color'),
        category: formData.get('category'),
        croppedImages, 
    };

    try {
        const response = await fetch('/admin/product/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(jsonPayload),
        });

        const result = await response.json();
        console.log(result);

        if (result.error) {
            document.getElementById('error').textContent = result.error;
        } else {
            window.location.reload();
        }
    } catch (error) {
        console.error('Error submitting form:', error);
    }
});


    </script>
   
        <% if (message.error) { %>
            <script>
            Swal.fire({
                icon: 'error',
                title: 'An Error Occurred',
                text: '<%= message.error %>'
            });
        </script>
        <% } %>
    
        <% if (message.success) { %>
            <script>
            Swal.fire({
                icon: 'success',
                title: 'Product Added',
                text: '<%= message.success %>'
            });
        </script>
        <% } %>
   
    
</body>
</html>
