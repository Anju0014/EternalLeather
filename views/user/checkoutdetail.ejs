
<div class="container mx-auto p-6 ">
    <h1 class="text-3xl font-bold mb-6">Checkout</h1>

    <!-- <form action="/user/checkout" method="POST" id="checkout-form" class="flex flex-col space-y-6"> -->
        
       
        <div class="bg-red-50 p-6 rounded-md shadow-md">
            <h2 class="text-xl font-bold mb-4">Select Delivery Address</h2>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach((address, index) => { %>
                        <div class="flex items-start justify-between bg-gray-100 p-4 rounded-md shadow">
                            <input type="radio" id="address<%= index %>" name="selectedAddress" value="<%= address._id %>" class="mr-4 mt-2" <%= index === 0 ? 'checked' : '' %> />
                            <div class="flex-grow">
                                <p class="font-semibold text-lg"><%= address.contactname %></p>
                                <p><%= address.building %>, <%= address.street %></p>
                                <p><%= address.city %>, <%= address.state %>, <%= address.country %>, <%= address.pincode %></p>
                                <p>Landmark: <%= address.landMark %></p>
                                <p>Phone: <%= address.phoneno %></p>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p class="text-gray-500">No addresses found. Please add a new address.</p>
                <% } %>
            </div>
           <a href="/user/profile" class="text-blue-500 hover:underline mt-4">Manage Addresses</a>
        </div>
       

        <div class="flex justify-between">
         
            <div class="bg-red-50 m-2 p-6 rounded-md shadow-md w-1/2 mr-10">
                <h2 class="text-xl font-bold mb-4">Cart Summary</h2>
                <input type="hidden" id="cartId" name="cartId" value="<%= cart._id %>">
                <% cart.items.forEach(item => { %>
                    <div class="flex justify-between mb-4">
                        <span class="font-semibold text-gray-800"><%= item.productId.productName %></span>
                        <span class="font-semibold text-gray-800">Rs.<%= item.discountPrice %> x <%= item.productCount %></span>
                    </div>
                <% }) %>
        
                <hr class="my-4">
                <div class="flex justify-between text-lg font-bold">
                    <span>Total Payable</span>
                    <span id="totalPayable">Rs.<%= cart.payablePrice %></span> 
                </div>
            </div>
        
            
   

          
            <div class="bg-red-50 m-2 p-6 rounded-md shadow-md w-1/2">
                <h2 class="text-xl font-bold mb-4">Apply Coupon</h2>
                <div class="w-full">
                    <!-- <select id="couponCodeSelect" class="w-full outline-none bg-white text-gray-600 text-sm px-4 py-2.5 border border-gray-300 rounded mb-2">
                        <option value="" selected>Select a coupon code</option>
                        <% coupons.forEach(coupon => { %>
                            <option value="<%= coupon._id %>" data-discount="<%= coupon.discountValue %>" data-type="<%= coupon.discountType %>">
                                <%= coupon.couponCode %> <%= coupon.discountValue %> 
                            </option>
                        <% }) %>
                    </select> -->
                    <select id="couponCodeSelect" class="w-full outline-none bg-white text-gray-600 text-sm px-4 py-2.5 border border-gray-300 rounded mb-2">
                        <option value="" selected>Select a coupon code</option>
                        
                        <% coupons.forEach(coupon => { %>
                            <option value="<%= coupon._id %>" 
                                    data-discount="<%= coupon.discountValue %>" 
                                    data-type="<%= coupon.discountType %>">
                                <%= coupon.couponCode %> - 
                                <% if (coupon.discountType === "percentage") { %>
                                    <%= coupon.discountValue %>% off
                                <% } else { %>
                                    Rs.<%= coupon.discountValue %> off
                                <% } %>
                            </option>
                        <% }) %>
                    </select>
            
                    <button type="button" onclick="applyCoupon()" id="applyButtonCoupon"
                        class="w-full flex items-center justify-center font-semibold tracking-wide bg-black hover:bg-red-900 px-4 py-2 text-sm text-white rounded mb-2">
                        Apply Coupon
                    </button>

                    <button type="button" onclick="removeCoupon()" id='removeCoupon' 
                    class="w-full flex items-center justify-center font-semibold tracking-wide bg-black hover:bg-red-900 px-4 py-2 text-sm text-white rounded hidden">
                    Remove Coupon
                   </button>
            
                    <input type="hidden" id="appliedCoupon" name="appliedCoupon" value="">
                    <input type="hidden" id="newTotalPayable" value="">
            
                    <div id="newTotalSection" class="mt-4 hidden">
                        <hr class="my-4">
                        <div class="flex justify-between text-lg font-bold">
                            <span>New Total</span>
                            <span id="newTotal">Rs.<%= cart.payablePrice %></span>
                        </div>
                    </div>
                </div>
            </div> 
            </div>
     
      
        <div class="bg-red-50 p-6 rounded-md shadow-md">
            <h2 class="text-xl font-bold mb-4">Select Payment Method</h2>
            <div class="space-y-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="cashOnDelivery" name="paymentMethod" value="Cash On Delivery" checked>
                        <label for="cashOnDelivery" class="ml-2 text-gray-700">Cash on Delivery</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Cash On Delivery')">Pay Now</button>
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="Wallet" name="paymentMethod" value="Wallet">
                        <label for="Wallet" class="ml-2 text-gray-700">Wallet</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Wallet')">Pay Now</button>
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                        <label for="razorpay" class="ml-2 text-gray-700">Razorpay</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Razorpay')">Pay Now</button>
                </div>
            </div>
        </div>
        <input type="hidden" id="razorpay_payment_id" name="razorpay_payment_id" value="">
        <input type="hidden" id="razorpay_order_id" name="razorpay_order_id" value="">
        <input type="hidden" id="razorpay_signature" name="razorpay_signature" value="">
        <!-- Place Order Button -->
        <!-- <div class="mt-6">
            <button type="button" class="w-full bg-blue-500 text-white py-3 rounded-md font-bold hover:bg-blue-600">
                Place Order
            </button>
        </div>
    </form> -->
</div>

<!-- Modal Structure -->
<div id="orderConfirmationModal" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-lg max-w-lg w-1/3 p-6">
        <div class="text-center">
            <h2 class="text-2xl font-semibold text-gray-800">Order Confirmed!</h2>
            <p class="mt-4 text-gray-600">Your order has been confirmed successfully.</p>
            <button id="closeModal" class="mt-6 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none">Close</button>
        </div>
    </div>
</div>

<script>

    function showModal() {
        document.getElementById("orderConfirmationModal").classList.remove("hidden");
    }

    document.getElementById("closeModal").addEventListener("click", function() {
        document.getElementById("orderConfirmationModal").classList.add("hidden");
    });
    
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    
    let originalTotalPayable = parseFloat('<%= cart.payablePrice %>');
    let couponApplied = false;

    function applyCoupon() {
        const couponSelect = document.getElementById('couponCodeSelect');
        const selectedOption = couponSelect.options[couponSelect.selectedIndex];

        if (selectedOption.value) {
            
            const discountValue = parseFloat(selectedOption.getAttribute('data-discount'));
            const discountType = selectedOption.getAttribute('data-type');
            let newTotal;

            
            if (discountType === 'percentage') {
                newTotal = originalTotalPayable - (originalTotalPayable * (discountValue / 100));
            } else {
                newTotal = originalTotalPayable - discountValue;
            }

            
            newTotal = Math.max(0, newTotal);

        
            document.getElementById('newTotal').innerText = `Rs.${newTotal.toFixed(2)}`;
            document.getElementById('newTotalSection').classList.remove('hidden');

            
            document.getElementById('newTotalPayable').value = newTotal;
            document.getElementById('appliedCoupon').value = selectedOption.value;
            
            document.getElementById('removeCoupon').classList.remove('hidden');
            document.getElementById('applyButtonCoupon').classList.add('hidden');

            couponApplied = true;
        } else {
            
            document.getElementById('newTotalSection').classList.add('hidden'); 
            document.getElementById('totalPayable').innerText = `Rs.${originalTotalPayable.toFixed(2)}`;
            document.getElementById('newTotalPayable').value = '';
            document.getElementById('appliedCoupon').value = ''; 
            couponApplied = false;
        }
    }
    function removeCoupon(){
            document.getElementById('newTotalSection').classList.add('hidden'); 
            document.getElementById('totalPayable').innerText = `Rs.${originalTotalPayable.toFixed(2)}`;
            document.getElementById('newTotalPayable').value = '';
            document.getElementById('appliedCoupon').value = ''; 
            couponApplied = false;
            document.getElementById('removeCoupon').classList.add('hidden');
            document.getElementById('applyButtonCoupon').classList.remove('hidden');
            document.getElementById('couponCodeSelect').value='';
    }
   
    document.getElementById('couponCodeSelect').addEventListener('change', () => {
        if (!document.getElementById('couponCodeSelect').value) {
          
            document.getElementById('totalPayable').innerText = `Rs.${originalTotalPayable.toFixed(2)}`;
            document.getElementById('newTotalSection').classList.add('hidden'); 
            couponApplied = false;
        }else{
            document.getElementById('removeCoupon').classLIst.remove('hidden');
        }
    });

   
    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('totalPayable').innerText = `Rs.${originalTotalPayable.toFixed(2)}`;
    });


    function handlePayNow(selectedMethod) {
        
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

        if (selectedMethod === 'Cash On Delivery') {
            
            // alert('Proceeding with Cash on Delivery');
            Swal.fire({
            icon: "success",
            title: "Proceeding with Cash on Delivery",
            // text: "Select one"
        });
        
            processWalletPayment();
        } else if (selectedMethod === 'Wallet') {
            
            // alert('Proceeding with Wallet payment');
            Swal.fire({
            icon: "success",
            title: "Proceeding with Wallet payment",
            // text: "Select one"
        });
            
            processWalletPayment();
        } else if (selectedMethod === 'Razorpay') {
        
            // alert('Proceeding with Razorpay payment');
            Swal.fire({
            icon: "success",
            title: "Proceeding with Razorpay payment",
            // text: "Select one"
        });
            processRazorpayPayment();
        }
    }

   
    function processWalletPayment() {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked')?.value;
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    const cartId = document.getElementById('cartId').value;
    const appliedCoupon = document.getElementById('appliedCoupon').value;
    const payAmount = parseFloat(document.getElementById('newTotalPayable').value) || originalTotalPayable;
    console.log(selectedAddress)
    console.log(selectedPaymentMethod )
    
    if (!selectedAddress) {
        Swal.fire({
            icon: "warning",
            title: "Please select a shipping address.",
            text: "Select one"
        });
        return;
    }

    
    if (!selectedPaymentMethod) {
        Swal.fire({
            icon: "warning",
            title: "Please select a payment method.",
            text: "Select one"
        });
        return;
    }
    if(selectedPaymentMethod==='Cash On Delivery' && payAmount>=1000){
        Swal.fire({
            icon: "warning",
            title: "Cash On Delivery not Available for purchase below 1000.",
            text: "Select Any Other Option"
        });
        return;
    }

    
    fetch('/user/checkout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            paymentMethod: selectedPaymentMethod,
            // cartTotal: totalAmount,
            selectedAddress: selectedAddress,
            cartId: cartId,
            appliedCoupon: appliedCoupon,
            paymentStatus:'Paid'
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            
            console.log("success");
            const modal = document.getElementById('orderConfirmationModal');
            modal.classList.remove('hidden');

           
            document.getElementById('closeModal').addEventListener('click', function() {
              
                modal.classList.add('hidden');

               
                window.location.href = '/user/order/summary';
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Payment Failed",
                text: data.message
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: "error",
            title: "An error occurred.",
            text: "Please try again."
        });
    });
}






// </script>

<script>

async function processRazorpayPayment() {
    try {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked')?.value;
        const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const cartId = document.getElementById('cartId').value;
        const appliedCoupon = document.getElementById('appliedCoupon').value;

        if (!selectedAddress) {
            Swal.fire({
                icon: "warning",
                title: "Please select a shipping address.",
                text: "Select one"
            });
            return;
        }

        if (!selectedPaymentMethod) {
            Swal.fire({
                icon: "warning",
                title: "Please select a payment method.",
                text: "Select one"
            });
            return;
        }

     
        const totalAmount = parseFloat(document.getElementById('newTotalPayable').value) || originalTotalPayable;
        const response = await fetch('/user/razorPayOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                amount: totalAmount,
            }),
        });

        const data = await response.json();

        if (data.orderID) {
            const options = {
                key: data.key_id, 
                amount: data.amount, 
                currency: "INR",
                name: "Pelle Eterno",
                description: "Order Payment",
                order_id: data.orderID, 
                handler: async function (response) {
                    document.getElementById('razorpay_payment_id').value = response.razorpay_payment_id;
                    document.getElementById('razorpay_order_id').value = response.razorpay_order_id;
                    document.getElementById('razorpay_signature').value = response.razorpay_signature;

          
                    const paymentData = {
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                    };

                    const verifyResponse = await fetch('/user/verifyPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(paymentData),
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        // alert('Payment successful and verified!');
                        Swal.fire({
                icon: "success",
                title: "Payment successful and verified!",
                // text: "Select one"
            });
                        

          
                        const formData = {
                            selectedAddress: selectedAddress,
                            paymentMethod: selectedPaymentMethod,
                            cartId: cartId,
                            appliedCoupon: appliedCoupon,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                        };

                  
                        const checkoutResponse = await fetch('/user/checkout', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(formData),
                        });

                        const result = await checkoutResponse.json();

                        if (result.success) {
                        
                            const modal = document.getElementById('orderConfirmationModal');
                            modal.classList.remove('hidden');

                          
                            document.getElementById('closeModal').addEventListener('click', function () {
                          
                                modal.classList.add('hidden');

                          
                                window.location.href = '/user/order/summary';
                            });
                        } else {
                            // alert(result.message);
                            Swal.fire({
                             icon: "error",
                             title: "Payment Failed",
                             text: "Payment failed. Switching to Cash on Delivery."
                              });

       
                              document.querySelector('input[name="paymentMethod"][value="Cash On Delivery"]').checked = true;

 
                              processWalletPayment()

                        }
                    } else {
                        // alert('Payment verification failed.');
                        Swal.fire({
                icon: "error",
                title: "Payment verification failed.",
                // text: "Select one"
            });
                        
                      
                    }
                },
                prefill: {
                    name: "<%= user.name %>", 
                    email: "<%= user.email %>",
                },
                theme: {
                    color: "#3399cc"
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();


            rzp1.on('payment.failed', async function (response) {
              
            const formData = {
                        selectedAddress: selectedAddress,
                        paymentMethod: selectedPaymentMethod,
                        cartId: cartId,
                        appliedCoupon: appliedCoupon,
                        paymentStatus:'Failed',
                        // razorpay_payment_id: response.razorpay_payment_id,
                        // razorpay_order_id: response.razorpay_order_id,
                        // razorpay_signature: response.razorpay_signature
                    };

                    const checkoutResponse = await fetch('/user/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const result = await checkoutResponse.json();

                    if (result.success) {
                      
                        const modal = document.getElementById('orderConfirmationModal');
                        modal.classList.remove('hidden');

                      
                        document.getElementById('closeModal').addEventListener('click', function () {
                           
                            modal.classList.add('hidden');

                         
                            window.location.href = '/user/order/summary';
                        });
                    } else {
                        // alert(result.message);
                        Swal.fire({
                icon: "error",
                title: "Payment failed.",
                text: result.message
            });
                        
                    
                    }

            });
    } else {
        // alert(data.message); 
        Swal.fire({
                icon: "error",
                title: "Payment failed.",
                 text: data.message,
            });
    }
} catch (error) {
    // console.error('Error initiating Razorpay payment:', error);
    // alert('An error occurred. Please try again.');
    next(error)
}
}


</script>

