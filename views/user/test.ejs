
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Checkout</h1>

    <form action="/user/checkout" method="POST" id="checkout-form" class="flex flex-col space-y-6">
        
       
        <div class="bg-white p-6 rounded-md shadow-md">
            <h2 class="text-xl font-bold mb-4">Select Delivery Address</h2>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach((address, index) => { %>
                        <div class="flex items-start justify-between bg-gray-100 p-4 rounded-md shadow">
                            <input type="radio" id="address<%= index %>" name="selectedAddress" value="<%= address._id %>" class="mr-4 mt-2" <%= index === 0 ? 'checked' : '' %> />
                            <div class="flex-grow">
                                <p class="font-semibold text-lg"><%= address.contactname %></p>
                                <p><%= address.building %>, <%= address.street %></p>
                                <p><%= address.city %>, <%= address.state %>, <%= address.country %>, <%= address.pincode %></p>
                                <p>Landmark: <%= address.landMark %></p>
                                <p>Phone: <%= address.phoneno %></p>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p class="text-gray-500">No addresses found. Please add a new address.</p>
                <% } %>
            </div>
            <a href="/user/profile" class="text-blue-500 hover:underline mt-4 block">Manage Addresses</a>
        </div>
       

        <div class="flex justify-between">
         
            <div class="bg-white p-6 rounded-md shadow-md w-1/2 mr-10">
                <h2 class="text-xl font-bold mb-4">Cart Summary</h2>
                <input type="hidden" id="cartId" name="cartId" value="<%= cart._id %>">>
                <% cart.items.forEach(item => { %>
                    <div class="flex justify-between mb-4">
                        <span class="font-semibold text-gray-800"><%= item.productId.productName %></span>
                        <span class="font-semibold text-gray-800">$<%= item.discountPrice %> x <%= item.productCount %></span>
                    </div>
                <% }) %>
        
                <hr class="my-4">
                <div class="flex justify-between text-lg font-bold">
                    <span>Total Payable</span>
                    <span id="totalPayable">$<%= cart.payablePrice %></span> 
                </div>
            </div>
        
            
   

          
            <div class="bg-white p-6 rounded-md shadow-md w-1/2">
                <h2 class="text-xl font-bold mb-4">Apply Coupon</h2>
                <div class="w-full">
                    <select id="couponCodeSelect" class="w-full outline-none bg-white text-gray-600 text-sm px-4 py-2.5 border border-gray-300 rounded mb-2">
                        <option value="" selected>Select a coupon code</option>
                        <% coupons.forEach(coupon => { %>
                            <option value="<%= coupon._id %>" data-discount="<%= coupon.discountValue %>" data-type="<%= coupon.discountType %>">
                                <%= coupon.couponCode %>
                            </option>
                        <% }) %>
                    </select>
            
                    <button type="button" onclick="applyCoupon()" 
                        class="w-full flex items-center justify-center font-semibold tracking-wide bg-black hover:bg-red-900 px-4 py-2 text-sm text-white rounded">
                        Apply Coupon
                    </button>
            
                    <input type="hidden" id="appliedCoupon" name="appliedCoupon" value="">
                    <input type="hidden" id="newTotalPayable" value="">
            
                    <div id="newTotalSection" class="mt-4 hidden">
                        <hr class="my-4">
                        <div class="flex justify-between text-lg font-bold">
                            <span>New Total</span>
                            <span id="newTotal">$<%= cart.payablePrice %></span>
                        </div>
                    </div>
                </div>
            </div> 
            </div>
     
      
        <div class="bg-white p-6 rounded-md shadow-md">
            <h2 class="text-xl font-bold mb-4">Select Payment Method</h2>
            <div class="space-y-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="cashOnDelivery" name="paymentMethod" value="Cash On Delivery" checked>
                        <label for="cashOnDelivery" class="ml-2 text-gray-700">Cash on Delivery</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Cash On Delivery')">Pay Now</button>
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="Wallet" name="paymentMethod" value="Wallet">
                        <label for="Wallet" class="ml-2 text-gray-700">Wallet</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Wallet')">Pay Now</button>
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                        <label for="razorpay" class="ml-2 text-gray-700">Razorpay</label>
                    </div>
                    <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="handlePayNow('Razorpay')">Pay Now</button>
                </div>
            </div>
        </div>
        <input type="text" id="razorpay_payment_id" name="razorpay_payment_id" value="">
        <input type="text" id="razorpay_order_id" name="razorpay_order_id" value="">
        <input type="text" id="razorpay_signature" name="razorpay_signature" value="">
        <!-- Place Order Button -->
        <div class="mt-6">
            <button type="submit" class="w-full bg-blue-500 text-white py-3 rounded-md font-bold hover:bg-blue-600">
                Place Order
            </button>
        </div>
    </form>
</div>

<!-- Modal Structure -->
<div id="orderConfirmationModal" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-lg max-w-lg w-1/3 p-6">
        <div class="text-center">
            <h2 class="text-2xl font-semibold text-gray-800">Order Confirmed!</h2>
            <p class="mt-4 text-gray-600">Your order has been confirmed successfully.</p>
            <button id="closeModal" class="mt-6 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none">Close</button>
        </div>
    </div>
</div>

<script>
    // Function to show the modal
    function showModal() {
        document.getElementById("orderConfirmationModal").classList.remove("hidden");
    }

    // Close modal when the "Close" button is clicked
    document.getElementById("closeModal").addEventListener("click", function() {
        document.getElementById("orderConfirmationModal").classList.add("hidden");
    });
    
</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    document.getElementById('checkout-form').addEventListener('submit', async function (e) {
        e.preventDefault();
          
        console.log("ooo")
    
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value;
        
    
        const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
       
        const cartId = document.getElementById('cartId').value;
        const appliedCoupon=document.getElementById('appliedCoupon').value
        const razorpay_payment_id = document.getElementById('razorpay_payment_id').value;
        const razorpay_order_id = document.getElementById('razorpay_order_id').value;
        const razorpay_signature = document.getElementById('razorpay_signature').value;
   
        const formData = {
            selectedAddress: selectedAddress,
            paymentMethod: selectedPaymentMethod,
            cartId:cartId,
            appliedCoupon:appliedCoupon,
            razorpay_payment_id,
            razorpay_order_id,
            razorpay_signature
            
        };

        // Send the data using fetch API
        const response = await fetch('/user/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
        });

        const result = await response.json();

        if (result.success) {
            const modal = document.getElementById('orderConfirmationModal');
    modal.classList.remove('hidden');

    // Add event listener to close the modal
    document.getElementById('closeModal').addEventListener('click', function() {
        // Hide the modal
        modal.classList.add('hidden');

        // Redirect to the order summary page after closing the modal
        window.location.href = '/user/order/summary';
    });
            // // Redirect to the order confirmation page
            // window.location.href = '/user/order/summary';
        } else {
            alert(result.message);
        }
    });


    let originalTotalPayable = parseFloat('<%= cart.payablePrice %>');
    let couponApplied = false;

    function applyCoupon() {
        const couponSelect = document.getElementById('couponCodeSelect');
        const selectedOption = couponSelect.options[couponSelect.selectedIndex];

        if (selectedOption.value) {
            // Coupon is applied
            const discountValue = parseFloat(selectedOption.getAttribute('data-discount'));
            const discountType = selectedOption.getAttribute('data-type');
            let newTotal;

            // Calculate the new total based on the coupon type
            if (discountType === 'percentage') {
                newTotal = originalTotalPayable - (originalTotalPayable * (discountValue / 100));
            } else {
                newTotal = originalTotalPayable - discountValue;
            }

            // Ensure the new total is not below zero
            newTotal = Math.max(0, newTotal);

            // Display the new total and show the section
            document.getElementById('newTotal').innerText = `$${newTotal.toFixed(2)}`;
            document.getElementById('newTotalSection').classList.remove('hidden');

            // Update the hidden input for new total
            document.getElementById('newTotalPayable').value = newTotal;
            document.getElementById('appliedCoupon').value = selectedOption.value;

            couponApplied = true;
        } else {
            // No coupon selected (reset to original total)
            document.getElementById('newTotalSection').classList.add('hidden'); // Hide the new total section
            document.getElementById('totalPayable').innerText = `$${originalTotalPayable.toFixed(2)}`;
            document.getElementById('newTotalPayable').value = '';
            document.getElementById('appliedCoupon').value = ''; // Reset the applied coupon field

            couponApplied = false;
        }
    }

    // Reset the coupon select when clicked to allow re-selection
    document.getElementById('couponCodeSelect').addEventListener('change', () => {
        if (!document.getElementById('couponCodeSelect').value) {
            // Reset to original payable price if no coupon is selected
            document.getElementById('totalPayable').innerText = `$${originalTotalPayable.toFixed(2)}`;
            document.getElementById('newTotalSection').classList.add('hidden'); // Hide the new total
            couponApplied = false;
        }
    });

    // Display the original total price before applying any coupon
    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('totalPayable').innerText = `$${originalTotalPayable.toFixed(2)}`;
    });


    function handlePayNow(selectedMethod) {
        // Get the selected payment method value
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

        if (selectedMethod === 'Cash On Delivery') {
            // Handle Cash on Delivery logic here
            alert('Proceeding with Cash on Delivery');
            // Submit the order form or call the backend API
            processOrder(paymentMethod);
        } else if (selectedMethod === 'Wallet') {
            // Handle Wallet payment logic here
            alert('Proceeding with Wallet payment');
            // Call backend API for wallet payment
            processWalletPayment();
        } else if (selectedMethod === 'Razorpay') {
            // Handle Razorpay payment logic here
            alert('Proceeding with Razorpay payment');
            processRazorpayPayment();
        }
    }

    function processOrder(paymentMethod) {
        // Example function to process an order for COD
        console.log(`Order placed with ${paymentMethod}`);
        // Here you can call your backend or proceed to order confirmation
    }

    function processWalletPayment() {
        const totalAmount = parseFloat(document.getElementById('newTotalPayable').value) || originalTotalPayable;
        fetch('/user/wallet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentMethod: 'Wallet',
                cartTotal: totalAmount  // Example total
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Payment  will be from wallet!');
              
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
        });
    }

   



async function processRazorpayPayment() {
    try {
        // Step 1: Create the order on the server
        const totalAmount = parseFloat(document.getElementById('newTotalPayable').value) || originalTotalPayable;
        const response = await fetch('/user/razorPayOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                amount: totalAmount, // Amount in INR
            }),
        });
        console.log("free")
        const data = await response.json();
        console.log(data)
        // Step 2: Check if the order was created successfully
        if (data.orderID) {
            console.log(data.order)
            const options = {
                key: data.key_id, // Your API key from Razorpay
                 amount: data.amount, // Amount in paise
                currency: "INR",
                name: "Pelle Eterno",
                description: "Order Payment",
                order_id: data.orderID, // Order ID generated from backend
                handler: async function (response) {

                    document.getElementById('razorpay_payment_id').value = response.razorpay_payment_id;
                    document.getElementById('razorpay_order_id').value = response.razorpay_order_id;
                    document.getElementById('razorpay_signature').value = response.razorpay_signature;
                    // Step 3: Payment successful, verify the payment
                    const paymentData = {
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                    };
                  console.log("pat")
                    // Send payment details to backend for verification
                    const verifyResponse = await fetch('/user/verifyPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(paymentData),
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        alert('Payment successful and verified!');
                        // Redirect to a success page 
                    } else {
                        alert('Payment verification failed.');
                    }
                },
                prefill: {
                    name: "<%= user.name %>", // Prefill with user data
                    email: "<%= user.email %>",
                },
                theme: {
                    color: "#3399cc"
                }
            };

            // Step 4: Open Razorpay checkout form
            const rzp1 = new Razorpay(options);
            rzp1.open();

            // Handle payment failure
            rzp1.on('payment.failed', function (response) {
                alert('Payment failed. Please try again.');
            });
        } else {
            alert(data.message); // Show error message if order creation fails
        }
    } catch (error) {
        console.error('Error initiating Razorpay payment:', error);
        alert('An error occurred. Please try again.');
    }
}

</script>





<script>


</script>



