
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin DashBoard</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src='https://kit.fontawesome.com/fc2e75786e.js' crossorigin='anonymous'></script>
    <link href="https://fonts.googleapis.com/css2?family=Sevillana&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">


    <style>
        /* Inline styles for the background image */
        .box-brown {
            /* background-image: #e3c7b4; */
            background-image: linear-gradient(to right,#FFE0CA, #964820)
        }
        .box-dash{
            background-image: linear-gradient(#FFE0CA, #bc6438)

        }
        .text-brown {
            color: #250201; /* Brown color */
        }
         .sevillana-title {
            font-family: 'Sevillana', cursive;
            font-size: 2.5em;
            text-align: center;
            margin-top: 10px;
        }
        .box-foot
        {   
            background-color:#964820
        }
      
    /* Apply bg-red-100 to even rows */
    /* #ordersTable tbody tr:nth-child(even) {
        background-color: #fecaca; /* bg-red-100 */
    /* } */

    </style>
</head>


<body>
    <%- include('adminheader') %>
  
    <div class="flex justify-normal">
        <div class="flex justify-items-start">
            <%- include('adminsidebar') %>
        <br>
        </div>
     
        <div class="flex-grow  p-6 ">
            <!-- <form action="/admin/order/search" method="post">
                <div class="flex justify-center m-10 ">
                    <input class="bg-white border border-red-900 rounded w-1/2 m-3 py-2 px-3" type="search" placeholder="Search Order" aria-label="Search" name="sename">
                    <button class=" text-white rounded bg-red-900 m-3 px-3 py-2" type="submit">Search</button>
                     <button class= "text-white rounded bg-red-900 m-3 px-3 py-2"><a href="/admin/product/add">Add Product</a></button> -->
                <!-- </div>
            </form> --> 

            <% if (light.error) { %>
                <div class="text-center bg-red-500 text-white rounded mb-4"><%= light.error %></div>
            <% } %>
            <% if (light.success) { %>
                <div class="text-center bg-green-700 text-white rounded mb-4"><%= light.success %></div>
            <% } %> 


          
            <!-- <table class="w-4/5 m-20 p-2 align-items-center border border-red-900 rounded">
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Name</th>
                        <th>Payment</th>
                        <th>Status</th>
                        <th>Price</th>
                        <th>Action</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <tr>
                                <td class="px-2"><%= message[i].orderId %></td>
                                <td class="px-8"><%= message[i].address.customerName %></td>
                                <td class="px-20"><%= message[i].paymentMethod %></td>
                                <td class="px-8">
                                    <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                        <select name="orderStatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                            <option value="Pending" <%= message[i].orderStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                                            <option value="Confirmed" <%= message[i].orderStatus === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                                            <option value="Delivered" <%= message[i].orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                            <option value="Returned" <%= message[i].orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                                            <option value="Cancelled" <%= message[i].orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                        </select>
                                    </form>
                                </td>
                                
                                <td class="px-8"><%= message[i].totalPayablePrice %></td>
                                <td class="px-8">
                                    <a href="/admin/order/cancel?id=<%= message[i]._id %>" onclick="return confirm('Are you sure you want to delete this product?');">
                                        <i class="fa-solid fa-trash text-danger"></i>
                                    </a>
                                </td>
                                <td class="px-8">
                                    <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                </td>
                            </tr>
                        <% } %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table> -->

            <!-- <table id="ordersTable" class="w-4/5 m-20 p-2 align-items-center border border-red-900 rounded"> -->
                <!-- <table id="ordersTable" class=" m-10 p-5 align-items-center border border-red-900 rounded">
                
                  
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Name</th>
                        <th>Payment</th>
                        <th>Status</th>
                        <th>Price</th>
                        <th>Action</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <tr>
                                <td class="px-2"><%= message[i].orderId %></td>
                                <td class="px-8"><%= message[i].address.customerName %></td>
                                <td class="px-20"><%= message[i].paymentMethod %></td>
                                <td class="px-8">

                                    <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                        <select name="orderStatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                            <option value="Pending" <%= message[i].orderStatus === 'Pending' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Pending</option>
                                            <option value="Confirmed" <%= message[i].orderStatus === 'Confirmed' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Confirmed</option>
                                            <option value="Delivered" <%= message[i].orderStatus === 'Delivered' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Delivered</option>
                                            <option value="Returned" <%= message[i].orderStatus === 'Returned' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Cancelled' ? 'disabled' : '' %>>Returned</option>
                                            <option value="Cancelled" <%= message[i].orderStatus === 'Cancelled' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Delivered' ? 'disabled' : '' %>>Cancelled</option>
                                            <option value="Shipped" <%= message[i].orderStatus === 'Shipped' ? 'selected' : '' %> 
                                                <%= message[i].orderStatus === 'Cancelled' ? 'disabled' : '' %>>Shipped</option>
                                        </select>
                                    </form>
                                    
                                    
                                </td>
                                <td class="px-8"><%= message[i].totalPayablePrice %></td>
                                <td class="px-8">
                                    <a href="/admin/order/cancel?id=<%= message[i]._id %>" onclick="return confirm('Are you sure you want to delete this product?');">
                                        <i class="fa-solid fa-trash text-danger"></i>
                                    </a>
                                </td>
                                <td class="px-8">
                                    <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                </td>
                            </tr>
                        <% } %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table> -->
            <table id="ordersTable" class="m-10 p-5 align-items-center border border-red-900 rounded">
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Payment</th>
                        <th>OrderStatus</th>
                        <th>Product Order Id</th>
                        <th>Product Name</th>
                        <th>product Order Status</th>
                        <th>Price</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <% for (let j = 0; j < message[i].products.length; j++) { %> <!-- Iterate over products -->
                                <tr>
                                    <% if (j === 0) { %> <!-- Only display order ID for the first product -->
                                        <!-- <td class="px-2" rowspan="<%= message[i].products.length %>"><%= message[i].orderId %></td> -->
                                        <td class="px-2" rowspan="<%= message[i].products.length %>"><%= message[i].orderId %></td>
                                         <td class="px-8" rowspan="<%= message[i].products.length %>"><%= message[i].paymentMethod %></td>
                                         <td class="px-8" rowspan="<%= message[i].products.length %>"><%= message[i].orderStatus %></td>
                                    <% } %>
                                    <!-- <td class="px-20"><%= message[i].paymentMethod %></td> -->
                                    <td class="px-8"><%= message[i].products[j].productOrderId %></td>
                                    <td class="px-8"><%= message[i].products[j].productname %></td>
                                    <!-- <td class="px-8"><%= message[i].products[j].productname %></td> -->
                                    <td class="px-8">
                                        <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                            <select name="productstatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                                <option value="Pending" <%= message[i].productstatus === 'Pending' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Pending</option>
                                                <option value="Confirmed" <%= message[i].productstatus === 'Confirmed' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Confirmed</option>
                                                <option value="Delivered" <%= message[i].productstatus === 'Delivered' ? 'selected' : '' %> 
                                                    <%= message[i].productStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Delivered</option>
                                                <option value="Returned" <%= message[i].productstatus === 'Returned' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Returned</option>
                                                <option value="Cancelled" <%= message[i].productstatus === 'Cancelled' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' ? 'disabled' : '' %>>Cancelled</option>
                                                <option value="Shipped" <%= message[i].productstatus === 'Shipped' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Shipped</option>
                                            </select>
                                        </form>
                                    </td>
                                    <td class="px-8"><%= message[i].products[j].productprice %></td>
                                    <!-- <td class="px-8">
                                        <a href="/admin/order/cancel?id=<%= message[i]._id %>&productId=<%= message[i].products[j].productId %>" onclick="return confirm('Are you sure you want to delete this product?');">
                                            <i class="fa-solid fa-trash text-danger"></i>
                                        </a>
                                    </td> -->
                                    <!-- <td class="px-8">
                                        <button onclick="openModal(<%= JSON.stringify(message[i]) %>, <%= JSON.stringify(message[i].products[j]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                    </td> -->
                                    <% if (j === 0) { %> <!-- Common View button for all products of the order -->
                                        <td class="px-8" rowspan="<%= message[i].products.length %>">
                                            <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                        </td>
                                    <% } %>
                                </tr>
                            <% } %>
                        <% } %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
            
            
            <div id="orderModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center max-height-[250px] z-50">
                <div class="bg-white p-5 rounded-md w-1/2 ">
                    <div class="flex justify-between items-center">
                        <h3 class="text-xl font-semibold">Order Details</h3>
                        <button onclick="closeModal()" class="text-red-500 font-bold">&times;</button>
                    </div>
                    <hr>
                    <div id="modalContent" class="max-height-[200px]">
                        
                        <p class="text-sm"><b>Order ID:</b> <span id="modalOrderId"></span></p>
                        <p class="text-sm"><strong>Order Date:</strong> <span id="modalOrderDate"></span></p> 
                        <p class="text-sm"><strong>Customer Name:</strong> <span id="modalCustomerName"></span></p>
                        <p class="text-sm"><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
                        <p class="text-sm"><strong>Total Price:</strong> $<span id="modalTotalPrice"></span></p>
                        <p class="text-sm"><strong>Order Status:</strong> <span id="modalOrderStatus"></span></p>
                         <div id="modalProducts" class="max-h-96 overflow-y-auto"></div>
                        
                    </div>
                     <div class="mt-4"> 
                    
                        <button id="downloadButton" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">
                            Download
                        </button>
                    </div>
                </div>
            </div> 
            
            <!-- Modal Structure -->
            <!-- <div id="orderModal" class="fixed z-10 inset-0 overflow-y-auto hidden">
                <div class="flex items-center justify-center min-h-screen px-4 text-center">
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
                    <div class="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all max-w-lg w-1/2">
                        <div class="bg-red-900 px-4 py-3">
                            <h2 class="text-lg font-medium text-white">Order Details</h2>
                        </div>
                        
                        <div class="px-4 py-5 bg-white">
                            <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                            <p><strong>Customer Name:</strong> <span id="modalCustomerName"></span></p>
                            <p><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
                            <p><strong>Total Price:</strong> <span id="modalTotalPrice"></span></p>
                            <p><strong>Products:</strong></p>
                            <ul id="modalProducts"></ul>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 text-right">
                            <button onclick="closeModal()" class="bg-red-900 text-white px-4 py-2 rounded hover:bg-red-700">Close</button>
                        </div>
                    </div>
                </div>
            </div>
             -->


            <!-- <div class="flex justify-center mt-4 mb-8">
                <% if (currentPage > 1) { %>
                    <a href="/admin/products?page=<%= currentPage - 1 %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded mr-2"><--</a>
                <% } %>
            
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/admin/products?page=<%= i %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded <%= currentPage === i ? 'bg-red-500 text-white' : '' %>">
                        <%= i %>
                    </a>
                <% } %>
            
                <% if (currentPage < totalPages) { %>
                    <a href="/admin/products?page=<%= currentPage + 1 %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded ml-2">--></a>
                <!-- <% } %>
            </div> -->
            
            </div>
        
</div>
</body>
</html>
<script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
<!-- jQuery (required by DataTables) -->
<!-- <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> -->
<!-- DataTables JS -->
<!-- <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script> -->

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script> -->

<script>
      $(document).ready(function() {
        $('#ordersTable').DataTable({
            "paging": true,       // Enable pagination
            "ordering": true,     // Enable column sorting
            "info": true,         // Display table information
            "searching": true,    // Enable search box
            "autoWidth": false,   // Disable automatic column width calculation
            "order": [[ 0, "desc" ]],  // Default sorting on the first column (Order ID), in descending order
            "columnDefs": [
              { "orderable": false, "targets": [7] }  // Disable sorting for the View column (index 7)
            ]
        });
    });
//     function openModal(order) {

//     document.getElementById('modalOrderId').innerText = order.orderId;
//     document.getElementById('modalCustomerName').innerText = orderData.customerId.name;
//     document.getElementById('modalPaymentMethod').innerText = order.paymentMethod;
//     // document.getElementById('modalTotalPayablePrice').innerText = order.totalPayablePrice;
//     document.getElementById('modalTotalPrice').innerText= order.totalPayablePrice;
//     // document.getElementById('modalTotalQuantity').innerText=order.totalQuantity;
//     document.getElementById('')


//     //const modal = document.getElementById('orderModal');
//     const modalOrderId = document.getElementById('modalOrderId');
//     const modalOrderDate = document.getElementById('modalOrderDate');
//     const modalProducts = document.getElementById('modalProducts');
//     const modalCustomerName = document.getElementById('modalCustomerName');
//     const modalPrice = document.getElementById('modalTotalPrice');
//     const modalPayment = document.getElementById('modalPaymentMethod');
//     const orderStatus=document.getElementById('modalOrderStatus');
//     // Populate product list
//     const productList = document.getElementById('modalProducts');
//     productList.innerHTML = ''; // Clear existing content
//     order.products.forEach(product => {
//         const listItem = document.createElement('li');
//         listItem.innerText = `${product.productname} - Quantity: ${product.productquantity}`;
//         productList.appendChild(listItem);
//     });

//     // Show modal
//     document.getElementById('orderModal').classList.remove('hidden');
// }

// function closeModal() {
//     // Hide modal
//     document.getElementById('orderModal').classList.add('hidden');
// }
function openModal(orderData) {
       
       const modal = document.getElementById('orderModal');
       const modalOrderId = document.getElementById('modalOrderId');
       const modalOrderDate = document.getElementById('modalOrderDate');
       const modalProducts = document.getElementById('modalProducts');
       const modalCustomerName = document.getElementById('modalCustomerName');
       const modalPrice = document.getElementById('modalTotalPrice');
       const modalPayment = document.getElementById('modalPaymentMethod');
       const orderStatus=document.getElementById('modalOrderStatus');
      
       modalOrderId.innerText = orderData.orderId;
       modalOrderDate.innerText = new Date(orderData.createdAt).toLocaleDateString();
       modalCustomerName.innerText = orderData.customerId.name;
       modalPrice.innerText=orderData.totalPayablePrice;
       modalPayment.innerText=orderData.paymentMethod;
       modalOrderStatus.innerText=orderData.orderStatus;

   
       modalProducts.innerHTML = '';  
       orderData.products.forEach(product => {
 
   const productPrice = product.productprice;


   modalProducts.innerHTML += `
       <div class="product-details border-b py-2">
           <img src="${product.productimage}" alt="${product.productname}" width="50" height="50">
           <p class="text-sm"><strong>Product Name:</strong> ${product.productname}</p>
           <p class="text-sm"><strong>Quantity:</strong> ${product.productquantity}</p>
           <p class="text-sm"><strong>Price:</strong> $${productPrice}</p>
       
       </div>
   `;
});


       // Show the modal
       modal.classList.remove('hidden');
       modal.classList.add('flex');
   }

   // Function to close the modal
   function closeModal() {
       const modal = document.getElementById('orderModal');
       modal.classList.add('hidden');
   }
</script>

<script>
    document.getElementById('downloadButton').addEventListener('click', async function () {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
    
        // Fetching order details from modal
        const orderId = document.getElementById('modalOrderId').innerText;
        const orderDate = document.getElementById('modalOrderDate').innerText;
        const customerName = document.getElementById('modalCustomerName').innerText;
        const paymentMethod = document.getElementById('modalPaymentMethod').innerText;
        const totalPrice = document.getElementById('modalTotalPrice').innerText;
        const orderStatus=document.getElementById('modalOrderStatus').innerText;
    
        // Adding text content to the PDF
        doc.text(`Order ID: ${orderId}`, 10, 10);
        doc.text(`Order Date: ${orderDate}`, 10, 20);
        doc.text(`Customer Name: ${customerName}`, 10, 30);
        doc.text(`Payment Method: ${paymentMethod}`, 10, 40);
        doc.text(`Total Price: ${totalPrice}`, 10, 50);
        doc.text(`Order Status: ${orderStatus}`, 10, 60);
    
        // Fetch product details from modalProducts div
        const productElements = document.querySelectorAll('#modalProducts .product-details');
    
        let yOffset = 70; // Initial Y position for product details and images
        for (const productElement of productElements) {
            const productName = productElement.querySelector('p:nth-child(2)').innerText.split(": ")[1];
            const productQuantity = productElement.querySelector('p:nth-child(3)').innerText.split(": ")[1];
            const productPrice = productElement.querySelector('p:nth-child(4)').innerText.split("$")[1];
            const productImage = productElement.querySelector('img').src;
    
            // Add product details (name, price, quantity) to PDF
            doc.text(`Product Name: ${productName}`, 90, yOffset);
            doc.text(`Price: ${productPrice}`, 90, yOffset + 10);
            doc.text(`Quantity: ${productQuantity}`, 90, yOffset + 20);
    
            try {
                // Convert image URL to base64 and add to PDF
                const base64Img = await getBase64ImageFromURL(productImage);
                // Adding image to PDF at (x, y, width, height)
                doc.addImage(base64Img, 'JPEG', 10, yOffset, 50, 50); // Adjust x, y, width, height as needed
            } catch (error) {
                console.error('Error loading image', error);
            }
    
            yOffset += 60; // Adjust Y position for next product (adjust height as per your content)
        }
    
        // Save the generated PDF
        doc.save('adminorder-details.pdf');
    });
    
    // Function to convert image URL to base64
    async function getBase64ImageFromURL(url) {
        const response = await fetch(url);
        const blob = await response.blob();
    
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        });
    }
    
    function closeModal() {
        document.getElementById('orderModal').classList.add('hidden');
    }
    
 
    
   
    </script>
  





    <table id="ordersTable" class=" m-10 p-5 align-items-center border border-red-900 rounded">
                
                  
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Name</th>
                        <th>Payment</th>
                        <th>OrderStatus</th>
                        <!-- <th>productName</th>
                        <th>Status</th>
                        <th>Price</th> -->
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <tr>
                                <td class="px-2"><%= message[i].orderId %></td>
                                <td class="px-8"><%= message[i].address.customerName %></td>
                                <td class="px-20"><%= message[i].paymentMethod %></td>
                                <td class="px-8" ><%= message[i].orderStatus %></td>
                                <!-- <td class="px-8">
                                    <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                        <select name="orderStatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                            <option value="Pending" <%= message[i].orderStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                                            <option value="Confirmed" <%= message[i].orderStatus === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                                            <option value="Delivered" <%= message[i].orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                            <option value="Returned" <%= message[i].orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                                            <option value="Cancelled" <%= message[i].orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            <option value="Shipped" <%= message[i].orderStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                        </select>
                                    </form>
                                </td> -->
                                <!-- <% for (let j = 0; j < message[i].products.length; j++) { %>

                                    <td class="px-8"><%= message[i].products[j].productname %></td>
                                    <td class="px-8">
                                        <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                            <select name="productstatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                                <option value="Pending" <%= message[i].productstatus === 'Pending' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Pending</option>
                                                <option value="Confirmed" <%= message[i].productstatus === 'Confirmed' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Confirmed</option>
                                                <option value="Delivered" <%= message[i].productstatus === 'Delivered' ? 'selected' : '' %> 
                                                    <%= message[i].productStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Delivered</option>
                                                <option value="Returned" <%= message[i].productstatus === 'Returned' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Returned</option>
                                                <option value="Cancelled" <%= message[i].productstatus === 'Cancelled' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' ? 'disabled' : '' %>>Cancelled</option>
                                                <option value="Shipped" <%= message[i].productstatus === 'Shipped' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Shipped</option>
                                            </select>
                                        </form>
                                    </td>
                                    <td class="px-8"><%= message[i].products[j].productprice %></td>
                                    <% } %> -->
                                <!-- <td class="px-8"><%= message[i].totalPayablePrice %></td> -->
                              
                                <td class="px-8">
                                    <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                </td>
                            </tr>
                        <% } %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>


            <table id="ordersTable" class=" m-10 p-5 align-items-center border border-red-900 rounded">
                
                  
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Name</th>
                        <th>Payment</th>
                        <th>OrderStatus</th>
                        <!-- <th>Status</th> -->
                        <th>Price</th>
                        <!-- <th>Action</th> -->
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <tr>
                                <td class="px-2"><%= message[i].orderId %></td>
                                <td class="px-8"><%= message[i].address.customerName %></td>
                                <td class="px-20"><%= message[i].paymentMethod %></td>
                                <td class="px-8" ><%= message[i].orderStatus %></td>
                               
                                <!-- <% for (let j = 0; j < message[i].products.length; j++) { %> -->
                                    <!-- <td class="px-8"><%= message[i].products[j].productOrderId %></td>
                                    <td class="px-8"><%= message[i].products[j].productname %></td>
                                    <td class="px-8">
                                        <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                            <select name="productstatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                                <option value="Pending" <%= message[i].productstatus === 'Pending' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Pending</option>
                                                <option value="Confirmed" <%= message[i].productstatus === 'Confirmed' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' || message[i].orderStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Confirmed</option>
                                                <option value="Delivered" <%= message[i].productstatus === 'Delivered' ? 'selected' : '' %> 
                                                    <%= message[i].productStatus === 'Cancelled' || message[i].orderStatus === 'Returned' ? 'disabled' : '' %>>Delivered</option>
                                                <option value="Returned" <%= message[i].productstatus === 'Returned' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Returned</option>
                                                <option value="Cancelled" <%= message[i].productstatus === 'Cancelled' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Delivered' ? 'disabled' : '' %>>Cancelled</option>
                                                <option value="Shipped" <%= message[i].productstatus === 'Shipped' ? 'selected' : '' %> 
                                                    <%= message[i].productstatus === 'Cancelled' ? 'disabled' : '' %>>Shipped</option>
                                            </select>
                                        </form>
                                    </td>
                                    <td class="px-8"><%= message[i].products[j].productprice %></td>
                                    <% } %> -->
                                <td class="px-8"><%= message[i].totalPayablePrice %></td>
                              
                                <td class="px-8">
                                    <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                </td>
                            </tr>
                        <% } %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
            








            <table id="ordersTable" class="m-10 p-5 align-items-center border border-red-900 rounded">
                <thead style="background-color: rgb(119, 45, 11); color: white;">
                    <tr>
                        <th>Order Id</th>
                        <th>Payment</th>
                        <th>OrderStatus</th>
                        <th>Product Order Id</th>
                        <th>Product Name</th>
                        <th>product Order Status</th>
                        <th>Price</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                        
                            <% for (let j = 0; j < message[i].products.length; j++) { %> 
                                <tr class="mb-2 py-10">
                                    <!-- <% if (j === 0) { %>  -->
                                        <td class="px-8" rowspan="<%= message[i].products.length %>"><%= message[i].orderId %></td>
                                         <td class="px-8" rowspan="<%= message[i].products.length %>"><%= message[i].paymentMethod %></td>
                                         <td class="px-8" rowspan="<%= message[i].products.length %>"><%= message[i].orderStatus %></td>
                                    <!-- <% } %> -->
                                 
                                    <td class="px-8"><%= message[i].products[j].productOrderId %></td>
                                    <td class="px-8"><%= message[i].products[j].productname %></td>
                                 
                                    <td class="px-8">
                                        <form action="/admin/order/<%= message[i]._id %>/toggle-block" method="POST">
                                            <select name="productstatus" onchange="this.form.submit()" class="bg-white border border-red-900 rounded px-2 py-1">
                                                <option value="Pending" <%= message[i].products[j].productstatus === 'Pending' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Delivered' || message[i].products[j].productstatus === 'Cancelled' || message[i].products[j].productstatus === 'Returned' ? 'disabled' : '' %>>Pending</option>
                                                <option value="Confirmed" <%= message[i].products[j].productstatus === 'Confirmed' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Delivered' || message[i].products[j].productstatus === 'Cancelled' || message[i].products[j].productstatus === 'Returned' ? 'disabled' : '' %>>Confirmed</option>
                                                <option value="Delivered" <%= message[i].products[j].productstatus === 'Delivered' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Cancelled' || message[i].products[j].productstatus === 'Returned' ? 'disabled' : '' %>>Delivered</option>
                                                <option value="Returned" <%= message[i].products[j].productstatus === 'Returned' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Cancelled' ? 'disabled' : '' %>>Returned</option>
                                                <option value="Cancelled" <%= message[i].products[j].productstatus === 'Cancelled' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Delivered' ? 'disabled' : '' %>>Cancelled</option>
                                                <option value="Shipped" <%= message[i].products[j].productstatus === 'Shipped' ? 'selected' : '' %> 
                                                    <%= message[i].products[j].productstatus === 'Cancelled' ? 'disabled' : '' %>>Shipped</option>
                                            </select>
                                        </form>
                                    </td>
                                    <td class="px-8"><%= message[i].products[j].productprice %></td>
                                  
                                    <!-- <% if (j === 0) { %> -->
                                        <td class="px-8" rowspan="<%= message[i].products.length %>">
                                            <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                        </td>
                                    <!-- <% } %> -->
                                </tr>
                             
                            <% } %>
                        <% } %>
                    <% } else { %>
                        <tr class="mb-2">
                            <td colspan="6" class="text-center">No Orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>







            // alert('Payment failed. Please try again.');
                
            Swal.fire({
            icon: "error",
            title: "Payment Failed",
            text: "Payment failed. Switching to Cash on Delivery."
        });

        // Change the payment method to Cash on Delivery
        document.querySelector('input[name="paymentMethod"][value="Cash On Delivery"]').checked = true;

        // Call the COD function
        processWalletPayment()

       




        rzp1.on('payment.failed', async function (response) {
            const formData = {
                        selectedAddress: selectedAddress,
                        paymentMethod: selectedPaymentMethod,
                        cartId: cartId,
                        appliedCoupon: appliedCoupon,
                        paymentStatus:'Failed',
                        // razorpay_payment_id: response.razorpay_payment_id,
                        // razorpay_order_id: response.razorpay_order_id,
                        // razorpay_signature: response.razorpay_signature
                    };

                    const checkoutResponse = await fetch('/user/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const result = await checkoutResponse.json();

                    if (result.success) {
                      
                        const modal = document.getElementById('orderConfirmationModal');
                        modal.classList.remove('hidden');

                      
                        document.getElementById('closeModal').addEventListener('click', function () {
                           
                            modal.classList.add('hidden');

                         
                            window.location.href = '/user/order/summary';
                        });
                    } else {
                        alert(result.message);
                    
                    }

            });
    } else {
        alert(data.message); 
    }
} catch (error) {
    // console.error('Error initiating Razorpay payment:', error);
    // alert('An error occurred. Please try again.');
    next(error)
}
}
</script>




 <!-- <% if (message && message.length > 0) { %>
                        <% for (let i = 0; i < message.length; i++) { %>
                            <tr>
                                <td class="px-2"><%= message[i].orderId %></td>
                                <td class="px-8"><%= message[i].address.customerName %></td>
                                <td class="px-20"><%= message[i].paymentMethod %></td>
                                <td class="px-8"><%= message[i].orderStatus %></td>
                                <td class="px-8"><%= message[i].totalPayablePrice %></td>
                                <td class="px-8">
                                    <button onclick="openModal(<%= JSON.stringify(message[i]) %>)" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">View</button>
                                </td>
                            </tr>
                        <% } %>
                    <% } else { %> -->







                    











<div class="main-content">
    <div class="sidebar-header">
        <h1 class="text-white">Sales Summary</h1>
    </div>
    <div class="stats">
        <div class="stat-item">
            <p>Revenue</p>
            <h2>
                <i class="fa-solid fa-indian-rupee-sign "></i>
                <%= Revenue %>
            </h2>
            <!-- <span class="stat-change negative">-25%</span> -->
        </div>
        <div class="stat-item">
            <p>Orders</p>
            <h2>
                <%= orderCount %>
            </h2>
            <!-- <span class="stat-change negative">-25%</span> -->
        </div>
        <div class="stat-item">
            <p>Products Sold</p>
            <h2>
                <%= productCount %>
            </h2>
            <!-- <span class="stat-change positive">+49%</span> -->
        </div>
        <div class="stat-item">
            <p>Total Customers</p>
            <h2>
                <%= userCount %>
            </h2>
            <!-- <span class="stat-change positive">+4%</span> -->
        </div>
    </div>
    <div class="container chart-container my-5">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="chartTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="orders-tab" data-bs-toggle="tab" data-bs-target="#orders"
                    type="button" role="tab" aria-controls="orders" aria-selected="true">Total Sales
                    Count</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="revenue-tab" data-bs-toggle="tab" data-bs-target="#revenue"
                    type="button" role="tab" aria-controls="revenue" aria-selected="false">Total
                    Revenue</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="products-tab" data-bs-toggle="tab" data-bs-target="#products"
                    type="button" role="tab" aria-controls="products" aria-selected="false">TotalProducts
                    Sold</button>
            </li>
        </ul>
        <div class="tab-content" id="chartTabsContent">
            <div class="tab-pane fade show active" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                <canvas id="ordersChart"></canvas>
            </div>
            <div class="tab-pane fade" id="revenue" role="tabpanel" aria-labelledby="revenue-tab">
                <div class="d-flex justify-content-end my-3">
                </div>
                <canvas id="revenueChart"></canvas>
            </div>
            <div class="tab-pane fade" id="products" role="tabpanel" aria-labelledby="products-tab">
                <div class="d-flex justify-content-end my-3">
                </div>
                <canvas id="productsChart"></canvas>
            </div>
        </div>
    </div>
</div>
</div>

<!-- best seller -->
<%- include ('bestSelling') %>

<%- include('footer') %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        function createChart(ctx, type, data, label) {
            return new Chart(ctx, {
                type: type,
                data: {
                    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                    datasets: [{
                        label: label,
                        data: data,
                        backgroundColor: '#D5D2FF',
                        borderColor: '#2b0a5a',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        // Fetch data from backend and update charts
        async function fetchDataAndRenderCharts() {
            try {
                const response = await fetch('/admin/charts');
                const data = await response.json();

                // Create charts with fetched data
                createChart(document.getElementById('ordersChart'), 'line', data.salesData, 'Total Sales Count');
                createChart(document.getElementById('revenueChart'), 'bar', data.revenueData, 'Total Revenue');
                createChart(document.getElementById('productsChart'), 'polarArea', data.productsData, 'Total Products Sold');
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        // Initial data fetch and rendering
        fetchDataAndRenderCharts();
    </script>




















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Over Time</title>
    <!-- Include ApexCharts Library -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>
<body>
    <!-- Chart Container -->
    <div id="salesChart" style="max-width: 650px; margin: auto;"></div>

    <script>
        // Example order data fetched from your backend
        const orders = [
            {
                totalPayablePrice: 6014,
                createdAt: "2024-10-18T04:31:08.152Z"
            },
            {
                totalPayablePrice: 5020,
                createdAt: "2024-10-17T03:22:10.152Z"
            },
            {
                totalPayablePrice: 7500,
                createdAt: "2024-10-16T08:15:12.152Z"
            },
            // Add more order data as needed
        ];

        // Extract data for the chart (Date and totalPayablePrice)
        const dates = orders.map(order => new Date(order.createdAt).toLocaleDateString());
        const sales = orders.map(order => order.totalPayablePrice);

        // ApexCharts configuration
        const options = {
            series: [{
                name: 'Total Payable Price',
                data: sales // Sales (Y-axis)
            }],
            chart: {
                type: 'line',
                height: 350,
                zoom: {
                    enabled: false
                }
            },
            stroke: {
                curve: 'smooth'
            },
            title: {
                text: 'Total Payable Price Over Time',
                align: 'left'
            },
            xaxis: {
                categories: dates, // Dates (X-axis)
                title: {
                    text: 'Date'
                }
            },
            yaxis: {
                title: {
                    text: 'Total Payable Price (in $)'
                }
            },
            tooltip: {
                y: {
                    formatter: function(value) {
                        return "$" + value;
                    }
                }
            }
        };

        // Render the chart
        var chart = new ApexCharts(document.querySelector("#salesChart"), options);
        chart.render();
    </script>
</body>
</html>





async function fetchOrders() {
    try {
        const response = await fetch('/api/orders');
        const orders = await response.json();
        return orders;
    } catch (error) {
        console.error('Error fetching orders:', error);
        return [];
    }
}

// Call fetchOrders() and render the chart dynamically






let orders = <%- JSON.stringify(orders) %>;

// Sort orders by createdAt date in ascending order
orders.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));

// Extract dates and sales
const dates = orders.map(order => new Date(order.createdAt).toLocaleDateString());
const sales = orders.map(order => order.totalPayablePrice);

// ApexCharts configuration
var options = {
    series: [{
        name: 'Total Price',
        data: sales // Sales (Y-axis)
    }],
    chart: {
        type: 'line',
        height: 350,
        zoom: {
            enabled: false
        }
    },
    stroke: {
        curve: 'smooth'
    },
    title: {
        text: 'Total Sales Over Time',
        align: 'left'
    },
    xaxis: {
        categories: dates, // Dates (X-axis)
        title: {
            text: 'Time'
        }
    },
    yaxis: {
        title: {
            text: 'Total Sales (in Rs.)'
        }
    },
    tooltip: {
        y: {
            formatter: function(value) {
                return "₹" + value;
            }
        }
    }
};

// Render the chart
var chart = new ApexCharts(document.querySelector("#chartline"), options);
chart.render();








// Function to filter orders based on selected value
function applyFilter(filterValue) {
    const now = new Date();
    let filteredOrders = [];

    switch (filterValue) {
        case 'thisDay':
            filteredOrders = orders.filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate.toDateString() === now.toDateString();
            });
            break;

        case 'thisWeek':
            const firstDayOfWeek = new Date(now);
            firstDayOfWeek.setDate(now.getDate() - now.getDay());
            filteredOrders = orders.filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate >= firstDayOfWeek && orderDate <= now; // Include today's orders
            });
            break;

        case 'thisMonth':
            filteredOrders = orders.filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate.getMonth() === now.getMonth() && orderDate.getFullYear() === now.getFullYear();
            });
            break;

        case 'thisYear':
            filteredOrders = orders.filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate.getFullYear() === now.getFullYear();
            });
            break;

        default:
            // Show all orders
            filteredOrders = orders;
            break;
    }

    // Update the chart
    updateChart(filteredOrders);
}


// Function to fetch orders
async function fetchOrders() {
    const response = await fetch('/api/orders'); // Adjust the URL to your endpoint
    const data = await response.json();
    return data; // Assuming the data returned is in the same format as before
}

// Function to filter orders based on selected value
async function applyFilter(filterValue) {
    const now = new Date();
    let filteredOrders = [];

    // Fetch new orders before filtering
    orders = await fetchOrders();

    switch (filterValue) {
        //... (filtering logic remains unchanged)
    }

    // Update the chart
    updateChart(filteredOrders);
}


document.getElementById('filter').addEventListener('change', debounce(function () {
    // Re-render chart based on the selected filter
    applyFilter(this.value);
}, 300)); // Adjust the debounce time as needed

function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}


