<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pelle Eterno</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src='https://kit.fontawesome.com/fc2e75786e.js' crossorigin='anonymous'></script>
    <link href="https://fonts.googleapis.com/css2?family=Sevillana&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        /* Inline styles for the background image */
        .box-brown {
            /* background-image: #e3c7b4; */
            background-image: linear-gradient(to right,#FFE0CA, #964820)
        }
        .box-dash{
            background-image: linear-gradient(#FFE0CA, #bc6438)

        }
        .text-brown {
            color: #250201; /* Brown color */
        }
         .sevillana-title {
            font-family: 'Sevillana', cursive;
            font-size: 2.5em;
            text-align: center;
            margin-top: 10px;
        }
        .box-foot
        {   
            background-color:#964820
        }
    </style>
</head>

<body>

  
     
    <div class="bg-black text-black h-3 w-full"></div>
    <div class=" box-brown  m-0  ">
      <header class="flex justify-around w-full">
        <div class="relative mb-2 sevillana-title text-center text-brown text-opacity-100">Pelle Eterno</div>
        <div>
        <img src="https://res.cloudinary.com/dihyb66hn/image/upload/v1725854174/products/caehmjvrf6qftxa9la9f.jpg" alt="logo" class=" h-20 w-20 ml-auto "></div>
      </header>
    </div>
    
    <%- include('userbreadcrumb') %>
 
    <div class="flex justify-normal"></div>
        <div class="flex justify-items-start">
            <%- include('usersidebar') %>
        <br>
        </div>

         <div class="w-4/5 m-20 p-2 align-items-center border border-red-900 rounded">
         



<div class="grid gap-4 mt-8 ">
    <% if (message && message.length > 0) { %>
        <% message.forEach((order) => { %>
            <div class="grid grid-cols-3 gap-4 bg-white p-4 rounded-md shadow-lg">
                
                <div class="col-span-1 space-y-2">
                    <h3 class="text-lg font-semibold">Order ID: <%= order.orderId %></h3>
                    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                    <p><strong>Total Price:</strong> Rs.<%= order.totalPayablePrice %></p>
                    <p class="text-blue-600"><strong>Order Status:</strong> <%= order.orderStatus %></p>
                </div>

                <!-- Products Section -->
                <!-- <div class="col-span-1 space-y-4">
                    <% order.products.forEach((product) => { %>
                        <div class="flex gap-4">
                            <div class="w-20 h-20">
                                <img src="<%= product.productimage %>" alt="<%= product.productname %>" class="w-full h-full object-cover rounded-md">
                            </div>
                            <div>
                                <p><strong>Product Name:</strong> <%= product.productname %></p>
                                <p><strong>Quantity:</strong> <%= product.productquantity %></p>
                                <% if (product.productDiscount > 0) { %>
                                    <p><strong>Price:</strong> $<%= product.productprice - (product.productprice * (product.productDiscount / 100)) %> 
                                        <span class="line-through text-sm text-gray-500">$<%= product.productprice %></span></p>
                                    <p class="text-sm text-red-500">Discount: <%= product.productDiscount %> %</p>
                                <% } else { %>
                                    <p><strong>Price:</strong> ₹<%= product.productprice %></p>
                                <% } %>
                                <% if (product.productquantity <= 0) { %>
                                    <p class="text-red-500">Product is out of stock</p>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                </div> -->

                <!-- <div class="col-span-1 space-y-4">
                    <% order.products.forEach((product) => { %>
                        <div class="flex gap-4">
                            <div class="w-20 h-20">
                                <img src="<%= product.productimage %>" alt="<%= product.productname %>" class="w-full h-full object-cover rounded-md">
                            </div>
                            <div>
                                <p><strong>Product Name:</strong> <%= product.productname %></p>
                                <p><strong>Quantity:</strong> <%= product.productquantity %></p>
                                <% if (product.productDiscount > 0) { %>
                                    <p><strong>Price:</strong> $<%= product.productprice - (product.productprice * (product.productDiscount / 100)) %> 
                                        <span class="line-through text-sm text-gray-500">₹<%= product.productprice %></span></p>
                                    <p class="text-sm text-red-500">Discount: <%= product.productDiscount %> %</p>
                                <% } else { %>
                                    <p><strong>Price:</strong> $<%= product.productprice %></p>
                                <% } %>
                                <% if (product.productquantity <= 0) { %>
                                    <p class="text-red-500">Product is out of stock</p>
                                <% } %>
                
                            
                             
                               
                                <div class="flex gap-2 mt-2">
                                  
                                    <% if (order.orderStatus !=='Cancelled' && order.orderStatus !== 'Returned') { %>

                                    <% if (product.productstatus === 'Pending' || product.productstatus === 'Confirmed') { %>
                                       
                                            <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                                            data-order-id="<%= order._id %>"
                                            data-product-id="<%= product.productId._id %>"
                                            onclick="cancelProduct(this)">Cancel</button>
                                        
                                    <% } %>
                
                          
                                    <% if (product.productstatus === 'Delivered') { %>
                                        <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                                            onclick="handleReturn('<%= product._id %>')">Return</button>
                                    <% } %>
                                    
                                    <% } %>

                                   
                                    <% if (order.orderStatus === 'Cancelled') { %>
                                        <p class="text-gray-500">This Order has been cancelled</p>
                                    <% }
                                    else if (order.orderStatus === 'Returned') { %>
                                        <p class="text-gray-500">This Order has been returned</p>
                                    <% }  else if (product.productstatus === 'Cancelled') { %>
                                        <p class="text-gray-500">This product has been cancelled</p>
                                    <% } else if (product.productstatus === 'Returned') { %>
                                        <p class="text-gray-500">This product has been returned</p>
                                    <% } %>
                                    
                                </div>
                                
                            </div>
                        </div>
                    <% }); %>
                </div>
                 -->

                 <div class="col-span-1 space-y-4">
                    <% order.products.forEach((product) => { %>
                        <div class="flex gap-4">
                            <div class="w-20 h-20">
                                <img src="<%= product.productimage %>" alt="<%= product.productname %>" class="w-full h-full object-cover rounded-md">
                            </div>
                            <div>
                                <p><strong>Product Name:</strong> <%= product.productname %></p>
                                <p><strong>Quantity:</strong> <%= product.productquantity %></p>
                                <% if (product.productDiscount > 0) { %>
                                    <p><strong>Price:</strong> $<%= (product.productprice - (product.productprice * (product.productDiscount / 100))).toFixed(2) %> 
                                        <span class="line-through text-sm text-gray-500">₹<%= product.productprice %></span></p>
                                    <p class="text-sm text-red-500">Discount: <%= product.productDiscount %> %</p>
                                <% } else { %>
                                    <p><strong>Price:</strong> Rs.<%= product.productprice %></p>
                                <% } %>
                                <% if (product.productquantity <= 0) { %>
                                    <p class="text-red-500">Product is out of stock</p>
                                <% } %>
                                
                                <!-- Cancel and Return Buttons -->
                                <div class="flex gap-2 mt-2">
                                    <% const excludedStatuses = ['Cancelled', 'Returned']; %>
                                    <% const validStatuses = ['Pending', 'Confirmed']; %>
                                    <% if (!excludedStatuses.includes(order.orderStatus)) { %>
                                        <% if (validStatuses.includes(product.productstatus)) { %>
                                    <!-- <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Returned') { %> -->
                                        <!-- <% if (product.productstatus === 'Pending' || product.productstatus === 'Confirmed') { %> -->

                                            <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                                                data-order-id="<%= order._id %>"
                                                data-product-id="<%= product.productId._id %>"
                                                onclick="cancelProduct(this)">Cancel</button>
                                        <% } %> 
                                        <% } %>
                                        
                                       
                                    <% } %>
                                    <% } %>
                                    <% if (product.productstatus === 'Delivered') { %>
                                        <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                                        data-order-id="<%= order._id %>"
                                        data-product-id="<%= product.productId._id %>"
                                        onclick="returnProduct(this)">Return</button>
                                    <% } %>
                                    <!-- <%= product.productstatus %> -->
                                    
                                   
                                    <% if (order.orderStatus === 'Cancelled') { %>
                                        <p class="text-gray-500">This Order has been cancelled</p>
                                    <% } else if (order.orderStatus === 'Returned') { %>
                                        <p class="text-gray-500">This Order has been returned</p>
                                    <% } else if (product.productstatus === 'Cancelled') { %>
                                        <p class="text-gray-500">This product has been cancelled</p>
                                    <% } else if (product.productstatus === 'Returned') { %>
                                        <p class="text-gray-500">This product has been returned</p>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
                
               
                <div class="col-span-1 flex items-center justify-end gap-2">
                     <!-- <% if (order.paymentStatus === 'Unpaid' ) { %>
                    <a href="/user/order/cancel?id=<%= order._id %>" onclick="return confirm('Are you sure you want to cancel this order?');" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                        Cancel
                    </a>
               <% } %> -->
               
          
                  <% if (order.paymentStatus === 'Unpaid') { %>
                    <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600" id="payretry"
                               onclick="payNow('<%= order._id %>')">Pay Now</button>
                  <% } %> 

                    <button onclick="openModal(<%= JSON.stringify(order) %>)" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                        View
                    </button>
                    <!-- <% if (order.products.some(product => product.productstatus === 'Delivered')) { %> 
                        <button onclick="downloadInvoice" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                            Download Invoice
                        </button>
                    <% } %> -->
                    
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <p class="text-center col-span-3">No Orders found.</p>
    <% } %>
    <div id="returnModal" class="fixed z-50 inset-0 hidden bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-lg w-96">
            <h2 class="text-xl font-bold mb-4">Reason for Return</h2>
            <textarea id="returnReason" class="w-full p-2 border border-gray-300 rounded-lg mb-4" rows="4" placeholder="Enter the reason for return"></textarea>
            <div class="flex justify-end space-x-4">
                <button onclick="closesmallModal()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Cancel</button>
                <button onclick="submitReturn()" class="bg-black text-white px-4 py-2 rounded hover:bg-red-700">Submit</button>
            </div>
        </div>
    </div>
    
</div>

            

 <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center max-height-[250px] z-50">
    <div class="bg-white p-5 rounded-md w-1/2 ">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-semibold">Order Details</h3>
            <button onclick="closeModal()" class="text-red-500 font-bold">&times;</button>
        </div>
        <hr>
        <div id="modalContent" class="max-height-[200px]">
            
            <p class="text-sm"><b>Order ID:</b> <span id="modalOrderId"></span></p>
            <p class="text-sm"><strong>Order Date:</strong> <span id="modalOrderDate"></span></p> 
            <p class="text-sm"><strong>Customer Name:</strong> <span id="modalCustomerName"></span></p>
            <p class="text-sm"><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
            <p class="text-sm"><strong>Total Price:</strong> Rs.<span id="modalTotalPrice"></span></p>
            <p class="text-sm"><strong>Order Status:</strong> <span id="modalOrderStatus"></span></p>
            <p class="text-sm hidden"><strong>Payment Status:</strong> <span id="modalPaymentStatus"></span></p>
            <p class="text-xs hidden"><strong>Address:</strong> <span id="modalAddress"></span></p>
            <div id="modalProducts" class="max-h-96 overflow-y-auto"></div>

            
        </div>
         <div class="mt-4"> 
        
            <button id="downloadButton" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 hidden">
                Download
            </button>
        </div>
    </div>
</div> 

       
              <div class="flex justify-center mt-4 mb-8">
                <% if (currentPage > 1) { %>
                    <a href="/user/profile/order?page=<%= currentPage - 1 %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded mr-2"><--</a>
                <% } %>
            
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/user/profile/order?page=<%= i %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded <%= currentPage === i ? 'bg-red-500 text-white' : '' %>">
                        <%= i %>
                    </a>
                <% } %>
            
                <% if (currentPage < totalPages) { %>
                    <a href="/user/profile/order?page=<%= currentPage + 1 %>" class="px-4 py-2 bg-gray-300 border border-gray-500 rounded ml-2">--></a>
                <% } %>
            </div>

         </div>


        
      
    </div>
    <%- include('userfooter') %>



<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
 
    function openModal(orderData) {
       
        const modal = document.getElementById('productModal');
        const modalOrderId = document.getElementById('modalOrderId');
        const modalOrderDate = document.getElementById('modalOrderDate');
        const modalProducts = document.getElementById('modalProducts');
        const modalCustomerName = document.getElementById('modalCustomerName');
        const modalPrice = document.getElementById('modalTotalPrice');
        const modalPayment = document.getElementById('modalPaymentMethod');
        const orderStatus=document.getElementById('modalOrderStatus');
        const orderPaymentStatus=document.getElementById('modalPaymentStatus');
        const address= document.getElementById('modalAddress');
       
        modalOrderId.innerText = orderData.orderId;
        modalOrderDate.innerText = new Date(orderData.createdAt).toLocaleDateString();
        modalCustomerName.innerText = orderData.customerId.name;
        modalPrice.innerText=orderData.totalPayablePrice;
        modalPayment.innerText=orderData.paymentMethod;
        modalOrderStatus.innerText=orderData.orderStatus;
        modalPaymentStatus.innerText=orderData.paymentStatus;
       
        // const address= orderData.address;

        const building = orderData.address.building;
    const street = orderData.address.street;
    const city = orderData.address.city;
    const country = orderData.address.country;
    const pincode = orderData.address.pincode;
    const landMark = orderData.address.landMark;


    const addressLines = [
        ` ${building}`,
        ` ${street}`,
        ` ${city}`,
        ` ${country}`,
        ` Pincode: ${pincode}`,
        landMark ? ` Landmark: ${landMark}` : '',
    ].filter(line => line);


    modalAddress.innerText=addressLines;
    
        modalProducts.innerHTML = '';   
        orderData.products.forEach(product => {
  
    const productPrice = product.productprice;


    modalProducts.innerHTML += `
        <div class="product-details border-b py-2">
            <img src="${product.productimage}" alt="${product.productname}" width="50" height="50">
            <p class="text-sm"><strong>Product Name:</strong> ${product.productname}</p>
            <p class="text-sm"><strong>Quantity:</strong> ${product.productquantity}</p>
            <p class="text-sm"><strong>Price:</strong> Rs.${product.productprice}</p>
            <p class="text-sm"><strong>Product Status:</strong> ${product.productstatus}</p>
        
        </div>
    `;

});
       
if (orderData.paymentStatus === 'Paid') { 
    document.getElementById('downloadButton').classList.remove('hidden');
} 

        // Show the modal
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    // Function to close the modal
    function closeModal() {
        const modal = document.getElementById('productModal');
        modal.classList.add('hidden');
    }





</script>


<script>

document.getElementById('downloadButton').addEventListener('click', async function () {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    doc.setFontSize(20); 
  
    doc.text('Pelle Eterno', doc.internal.pageSize.getWidth() / 2, 10, { align: 'center' });

 
    doc.setFontSize(10); 

 
    const orderId = document.getElementById('modalOrderId').innerText;
    const orderDate = document.getElementById('modalOrderDate').innerText;
    const customerName = document.getElementById('modalCustomerName').innerText;
    const paymentMethod = document.getElementById('modalPaymentMethod').innerText;
    const totalPrice = document.getElementById('modalTotalPrice').innerText;
    const orderStatus = document.getElementById('modalOrderStatus').innerText;
    const address = document.getElementById('modalAddress').innerText;

 
    doc.text(`Order ID: ${orderId}`, 10, 20);
    doc.text(`Order Date: ${orderDate}`, 10, 30);
    doc.text(`Customer Name: ${customerName}`, 10, 40);
    doc.text(`Payment Method: ${paymentMethod}`, 10, 50);
    doc.text(`Order Status: ${orderStatus}`, 10, 60);
    doc.text(`Total Price: Rs. ${totalPrice}`, 10, 70);

   
    const addressLines = doc.splitTextToSize(`Address: ${address}`, 180);
    doc.text(addressLines, 10, 80);

   
    const startY = 100; 
    const colWidths = [20, 60, 30, 30, 30]; 

    doc.text("Image", 10, startY);
    doc.text("Product Name", 40, startY);
    doc.text("Price", 100, startY);
    doc.text("Quantity", 130, startY);
    doc.text("Status", 160, startY);


    const productElements = document.querySelectorAll('#modalProducts .product-details');
    let yOffset = startY + 20; 
    for (const productElement of productElements) {
        const productName = productElement.querySelector('p:nth-child(2)').innerText.split(": ")[1];
        const productQuantity = productElement.querySelector('p:nth-child(3)').innerText.split(": ")[1];
        const productPrice = productElement.querySelector('p:nth-child(4)').innerText.split(": Rs.")[1];
        const productImage = productElement.querySelector('img').src;
        const productStatus = productElement.querySelector('p:nth-child(5)').innerText.split(": ")[1];

  
        try {
       
            const base64Img = await getBase64ImageFromURL(productImage);
          
            doc.addImage(base64Img, 'JPEG', 10, yOffset - 10, 20, 20);
        } catch (error) {
            console.error('Error loading image', error);
        }

        doc.text(productName, 40, yOffset);
        doc.text(`Rs. ${productPrice}`, 100, yOffset);
        doc.text(productQuantity, 130, yOffset);
        doc.text(productStatus, 160, yOffset);

        yOffset += 30; 
    }

   
    doc.save('order-details.pdf');
});


async function getBase64ImageFromURL(url) {
    const res = await fetch(url);
    const blob = await res.blob();
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}


</script>

<script>
    function cancelProduct(button) {
    const orderId = button.getAttribute('data-order-id');
    const productId = button.getAttribute('data-product-id');
    fetch(`/user/order/cancelProduct`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            orderId: orderId,
            productId: productId
        })
    })
    .then(response => {
        console.log('Response Status:', response.status); 
        return response.json();
    })
    .then( async data => {
        console.log('Response Data:', data); 
        if (data.success) {
               await Swal.fire({ 
                icon: "success",
                title: 'Product successfully canceled!',
               
            });
         
            window.location.reload(); 
        } else {
            await Swal.fire({ 
                icon: "error",
                text: 'Failed to cancel the product!',
            });
         
            // alert('Failed to cancel the product. Please try again.');
        }
    })
    .catch((error) => {
        console.error('Error:', error);
        // alert('An error occurred while canceling the product.');
        await Swal.fire({ 
                icon: "error",
                text: 'An error occurred while canceling the product.!',
            });
    });
}






let currentOrderId = null;
let currentProductId=null;

function returnProduct(button) {
    currentOrderId = button.getAttribute('data-order-id');
    currentProductId = button.getAttribute('data-product-id');
    // currentOrderId = orderId; 
    // currentproductId=productId // Save the order ID for use in submission
    document.getElementById('returnModal').classList.remove('hidden');
}

function closesmallModal() {
    document.getElementById('returnModal').classList.add('hidden');
}

async function submitReturn() {
    const reason = document.getElementById('returnReason').value;
    console.log(reason)
    
    if (!reason.trim()) {
        alert('Please enter a reason for return');
        return;
    }

    
    closesmallModal();

    
    try {
        const response = await fetch('/user/order/returnProduct', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                productId:currentProductId,
                reason: reason
            })
        });

        if (response.ok) {
            console.log(response)
            // alert('Return request submitted successfully.');
            await Swal.fire({ 
                icon: "success",
                title: "Return Successfully Completed.",
                // text: "Select one"
            });
            location.reload();
        } else {
            alert('Failed to submit return request.');
        }
    } catch (error) {
        console.log('Error submitting return:', error);
        alert('An error occurred while submitting the return request.');
    }
}




async function payNow(orderId){

    try{
    
    const response = await fetch('/user/retryPayment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orderId:orderId,
            }),
        });


const data = await response.json();


if (data.orderID) {
    const options = {
        key: data.key_id, 
        amount: data.amount, 
        name: "Pelle Eterno",
        description: "Order Payment",
        order_id: data.orderID,
        handler: async function (response) {
           
            const paymentData = {
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
            };

            
            const verifyResponse = await fetch('/user/verifyPayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData),
            });

            const verifyData = await verifyResponse.json();

            if (verifyData.success) {
                // alert('Payment successful and verified!');
 
                 await Swal.fire({ 
                icon: "success",
                title: "Payment Successfully Completed.",
                // text: "Select one"
            });
                        
            
                const formData = {
                    orderId:orderId,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_signature: response.razorpay_signature,
                };

             
                const checkoutResponse = await fetch('/user/paymentRetryStatus', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                });

                const result = await checkoutResponse.json();

                if (result.success) {
                  //button invisible
                  document.getElementById('payretry').style.display = 'none';
                  window.location.reload();
                  
                } else {
                    alert(result.message);
                    Swal.fire({
                     icon: "error",
                     title: "Payment Failed",
                     text: "Payment failed."
                      });

                }
            } else {
                // alert('Payment verification failed.');
              
                Swal.fire({
                icon: "error",
                title: "Payment verification failed.",
             
            });
                        
            }
        },
        prefill: {
            name: "<%= user.name %>", 
            email: "<%= user.email %>",
        },
        theme: {
            color: "#3399cc"
        }
    };

   
    const rzp1 = new Razorpay(options);
    rzp1.open();


    rzp1.on('payment.failed', async function (response) {
        Swal.fire({
                     icon: "error",
                     title: "Payment Failed",
                     text: "Payment failed."
                      })

    });
} else {
    Swal.fire({
                     icon: "error",
                     title: "Payment Failed",
                     text: data.message
                      })

}
} catch (error) {

    Swal.fire({
    icon: "error",
    title: "Payment Failed",
    text: error.message || error.toString(),
});

}
}


</script>

</body>
</html>